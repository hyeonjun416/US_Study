#include <iostream>

using namespace std;

int main(){
    // new 연산자
    /* <역할>
    어떤 데이터형을 원하는지 new 연산자에게 알려주면,
    new 연산자는 그에 알맞은 크기의 메모리 블록을 찾아내고
    그 블록의 주소를 리턴합니다.
    */

   //<1>
   int a;
   int* b = &a;

   //<2>
   int* pointer = new int; // new int = int형 데이터를 지정할 수 있는 새로운 메모리가 필요하다고 알리는 것
   // new는 뒤에 따라오는 데이터형을 확인하고, 몇 바이트가 필요한지 계산
   // int 는 윈도우10 기준 4바이트
   // 그렇다면 pointer는 지시하는 메모리의 이름이 없는데 어떻게 메모리에 접근하는가?
   // = pointer가 데이터의 객체(어떠한 것)를 지시하고 있다고 표현함.
   // 메모리 제어권이 사용자에게 있음

   /*[1과 2의 차이]
   2는 pointer만이 int형 값에 접근할 수 있는 유일한 방법
   1은 b를 통해서도, a의 주소를 통해서도 접근할 수 있음
   */

   // delete 연산자
   /*
   사용한 메모리를 다시 메모리 폴로 환수
   환수된 메모리는 프로그램의 다른 부분이 다시 사용
   */

  int* ps = new int;
  //메모리 사용하는 코드가 작성된 부분
  delete ps; // ps에 할당된 메모리를 프로그램의 다른 부분이 다시 사용할 수 있도록 삭제해주는 부분
  // new를 사용해준 이후에는 delete 필수
  // 하지 않을 시 대입은 되었지만, 나중에 사용되지 않는 메모리 누수가 발생.
  // 메모리 누수 크기가 커지면, 프로그램이 맛이 갈수도 있음.

  /* delete 4가지 규칙
  1. new로 대입하지 않은 메모리는 delete로 해제할 수 없다.
  2. 같은 메모리 블록을 연달아 두 번 delete로 해제할 수 없다.
  3. new[]로 메모리를 대입할 경우 delete[]로 해제한다.
  4. 대괄호를 사용하지 않았다면 delete도 대괄호를 사용하지 않아야 한다.
  */
    return 0;
}