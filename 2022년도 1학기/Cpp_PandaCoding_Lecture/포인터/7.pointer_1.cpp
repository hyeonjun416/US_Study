#include <iostream>

using namespace std;

int main(){
    // 지금까지의 변수 선언 과정
    int val = 3; // 변수의 데이터형과 변수명을 제공
    // 프로그래밍에 위 두가지를 제공해주면, 우리 눈에는 보이지 않지만
    // 그 값을 저장하기 위한 메모리를 대입하게되고, 그 위치를 내부적으로 추적할 수 있는 형태
    // 이처럼, 프로그램이 내부적으로 메모리를 대입한 공간이 "주소"라고 부르는 공간
    // 주소연산자(&)를 통해 프로그램이 값을 어디 메모리에 저장했는지 확인가능
    cout << &val << endl; // 16진수가 주소를 표현하는 가장 기본적인 방법이므로, 일반적으로는 16진수로 나타남.

    // C+ : 객체지향 프로그래밍
    /* < 객체지향 프로그래밍의 특징 >
    1. 컴파일 시간이 아닌 실행 시간에 어떠한 결정을 내릴 수 있다.(특징 중 가장 큰 것)
    [컴파일 시간] : 프로그램이 코드를 읽는 시간
    [실행 시간] : 코드가 실행되서 돌아가고 있는 시간
    <예시> 배열 생성
    - 재래적/절차적 프로그래밍 : 배열의 크기가 미리 결정되어야 배열 사용 가능 => 배열의 크기가 컴파일 시간에 결정되어야 함
    - 객체지향 프로그래밍 : 배열의 크기를 실행 시간에 결정 가능 => 배열의 크기를 실행 시간에 결정 가능
    (= 변수로 배열의 크기를 결정할 수 있다 = 메모리 낭비 최소화)
    */

    // 포인터의 요지는 기존의 변수 선언(변수의 이름을 통해 관리)과 달리
    // 데이터를 다루는 주소에 이름을 붙인다고 이해하면 쉬움.
    
    // 포인터 : 사용할 주소에 이름을 붙인다
    // 즉, 포인터는 포인터의 이름이 주소를 나타냅니다.
    // 간접값 연산자(간접 참조 연산자) = *
    int *a; // C style
    int* b; // C++ style
    int* c, d; // c는 포인터 변수, d는 int형 변수
    
    return 0;
}