#include <iostream>

using namespace std;

int main(){
    // 반복문이란?
    char a[10] = { 'a', 'b', 'c', 'd', 'e'};

    cout << a << endl; // 배열 이름을 선언함으로써 배열 원소 출력가능
    // 하지만 원소 하나하나를 반복적으로 출력하고 싶다면?
    cout << a[0] << endl;
    cout << a[1] << endl;
    cout << a[2] << endl;
    cout << a[3] << endl;
    cout << a[4] << endl;
    // 위와 같이 하나하나 인덱스에 직접 연결 -> 이와 같은 것을 편하게 하기 위한 것이 반복분

    // 대표적인 for문
    for(int i=0 ; i < 5; i++) { // 부등호로 연결된 식을 "관계표현식"
        //code
    }
    /* 반복문 규칙
    1. 반복문에 사용할 카운터의 값을 초기화
     == 카운터? : 위의 예에서는 int = i. 몇 번을 반복할지 그 기준을 프로그램에 제시하기 위하여 사용하는 변수
    2. 반복문을 진행할 것인지 '조건 검사'
     == 위의 예에서 i<5 부분.
    3. 반복문 몸체를 수행합니다.
     == () 이후에 있는 { } 로 이루어진 블럭
    4. 카운터의 값을 변화합니다.
     == 위의 예에서 i++ 부분.
     ** 코드 가독성을 위해 for문 안에 작성하는 것.
     ** 몸체에 i++ 을 작성해도 무방
    */
   /* 관계표현식
   < : 작다
   <= : 작거나 같다
   > : 크다
   >= : 크거나 같다
   == : 같다
   != : 같지 않다
   */
   // 증가 연산자, 감소 연산자
   int x = 10;
   int y = 10;

   cout << "x is " << x << ", y is " << y << endl;
   cout << "x++ is " << x++ << endl; // 10
   cout << "++y is " << ++y << endl; // 11
   cout << "Now, the x is " << x << endl; // 11
   // 증감 연산자에서 ++가 변수 앞에 붙느냐 뒤에 붙느냐는
   // 변수의 값을 먼저 판단하고 증가시킬지, 증가시키고 판단할 것인지를 의미
   // x++는 x를 먼저 판단하고 증가시키기 때문에 10이 출력
   // ++y는 y를 먼저 증가시키고 판단하기 때문에 11이 출력
    return 0;
}